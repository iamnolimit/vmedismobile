// File: Views/Pages/LoginPageView.swift - Updated with AppStateimport SwiftUIstruct LoginPageView: View {    let selectedItem: SliderItem    @Environment(\.presentationMode) var presentationMode    @EnvironmentObject var appState: AppState    @StateObject private var loginService = LoginService()        @State private var subdomain: String = ""    @State private var username: String = ""    @State private var password: String = ""    @State private var isLoading: Bool = false    @State private var showPassword: Bool = false    @State private var showAlert = false    @State private var alertMessage = ""    @State private var alertTitle = ""        var body: some View {        ZStack {            Color.white.ignoresSafeArea()                        VStack(spacing: 0) {                customNavigationBar                                ScrollView(showsIndicators: false) {                    VStack(spacing: 40) {                        headerSection.padding(.top, 40)                        loginFormSection                        footerSection                    }                    .padding(.horizontal, 24)                    .padding(.bottom, 40)                }            }        }        .navigationBarHidden(true)        .alert(alertTitle, isPresented: $showAlert) {            Button("OK") { }        } message: {            Text(alertMessage)        }    }        // MARK: - Custom Navigation Bar    private var customNavigationBar: some View {        HStack {            Button(action: {                presentationMode.wrappedValue.dismiss()            }) {                Image(systemName: "arrow.left")                    .font(.title2)                    .foregroundColor(selectedItem.iconColor)                    .frame(width: 44, height: 44)                    .background(Color.gray.opacity(0.1))                    .clipShape(Circle())            }            Spacer()        }        .padding(.horizontal, 24)        .padding(.top, 10)    }        private var headerSection: some View {            VStack(spacing: 32) {                // Logo dari Bundle Resource                if let logoImage = UIImage(named: "logo") {                    Image(uiImage: logoImage)                        .resizable()                        .aspectRatio(contentMode: .fit)                        .frame(width: 120, height: 120)                        .clipShape(RoundedRectangle(cornerRadius: 16))                        .shadow(color: selectedItem.iconColor.opacity(0.2), radius: 20, x: 0, y: 10)                } else {                    // Fallback jika image tidak ditemukan                    ZStack {                        Circle()                            .fill(selectedItem.backgroundColor)                            .frame(width: 100, height: 100)                            .shadow(color: selectedItem.iconColor.opacity(0.2), radius: 20, x: 0, y: 10)                                                Image(systemName: selectedItem.iconName)                            .font(.system(size: 40, weight: .medium))                            .foregroundColor(selectedItem.iconColor)                    }                }                                VStack(spacing: 12) {                    Text("Welcome Back")                        .font(.system(size: 28, weight: .bold))                        .foregroundColor(.black)                                        Text("Sign in to \(selectedItem.title)")                        .font(.system(size: 16))                        .foregroundColor(.gray)                }            }        }        // MARK: - Login Form Section    private var loginFormSection: some View {        VStack(spacing: 24) {            VStack(spacing: 20) {                CleanTextField(                    title: "Subdomain",                    text: $subdomain,                    placeholder: "Enter your subdomain",                    suffix: ".vmedismart.com",                    icon: "building.2",                    accentColor: selectedItem.iconColor                )                                CleanTextField(                    title: "Username",                    text: $username,                    placeholder: "Enter your username",                    icon: "person",                    accentColor: selectedItem.iconColor                )                                CleanPasswordField(                    title: "Password",                    text: $password,                    placeholder: "Enter your password",                    showPassword: $showPassword,                    accentColor: selectedItem.iconColor                )            }                        Button(action: {                Task { await handleLogin() }            }) {                HStack(spacing: 12) {                    if isLoading {                        ProgressView()                            .progressViewStyle(CircularProgressViewStyle(tint: .white))                            .scaleEffect(0.8)                    } else {                        Text("Sign In")                            .font(.system(size: 17, weight: .semibold))                        Image(systemName: "arrow.right")                            .font(.system(size: 16, weight: .semibold))                    }                }                .foregroundColor(.white)                .frame(maxWidth: .infinity)                .frame(height: 56)                .background(isFormValid ? selectedItem.iconColor : Color.gray.opacity(0.3))                .cornerRadius(16)                .shadow(                    color: isFormValid ? selectedItem.iconColor.opacity(0.3) : Color.clear,                    radius: 10,                    x: 0,                    y: 4                )            }            .disabled(!isFormValid || isLoading)            .scaleEffect(isFormValid ? 1.0 : 0.98)            .animation(.spring(response: 0.3), value: isFormValid)        }        .padding(32)        .background(            RoundedRectangle(cornerRadius: 20)                .fill(Color.white)                .shadow(color: Color.black.opacity(0.08), radius: 20, x: 0, y: 8)        )    }        // MARK: - Footer Section    private var footerSection: some View {        VStack(spacing: 20) {            Button("Forgot Password?") {                handleForgotPassword()            }            .font(.system(size: 16, weight: .medium))            .foregroundColor(selectedItem.iconColor)            .padding(.vertical, 16)            .frame(maxWidth: .infinity)            .background(                RoundedRectangle(cornerRadius: 12)                    .stroke(selectedItem.iconColor.opacity(0.3), lineWidth: 1)            )                        Text("Secure login powered by VmedisSmart")                .font(.system(size: 13))                .foregroundColor(.gray.opacity(0.7))        }    }        // MARK: - Computed Properties    private var isFormValid: Bool {        !subdomain.isEmpty && !username.isEmpty && !password.isEmpty    }        // MARK: - Actions    private func handleLogin() async {        guard isFormValid else { return }                isLoading = true        let fullDomain = "\(subdomain)"                do {            let response = try await loginService.login(                username: username,                password: password,                domain: fullDomain            )                        if response.status == "success" {                print("=== LOGIN SUCCESS ===")                print("App: \(selectedItem.title)")                print("Domain: \(fullDomain)")                                if let userData = response.data {                    print("User Data:")                    print("- ID: \(userData.id ?? 0)")                    print("- Username: \(userData.username ?? "")")                    print("- Token: \(userData.token ?? "")")                    print("- Klinik: \(userData.kl_nama ?? "")")                    print("- Level: \(userData.lvl ?? 0)")                                        // Use AppState to manage login state                    await MainActor.run {                        print("=== UPDATING APP STATE ===")                        print("Setting appState.isLoggedIn = true")                        appState.login(with: userData)                        print("AppState updated successfully")                        print("isLoggedIn: \(appState.isLoggedIn)")                    }                }                print("====================")                            } else {                await MainActor.run {                    alertTitle = "Login Failed"                    alertMessage = response.message ?? "Invalid credentials"                    showAlert = true                }            }                    } catch {            await MainActor.run {                alertTitle = "Error"                if let loginError = error as? LoginError {                    alertMessage = loginError.errorDescription ?? "Unknown error"                } else {                    alertMessage = "Network error: \(error.localizedDescription)"                }                showAlert = true            }        }                await MainActor.run {            isLoading = false        }    }        private func handleForgotPassword() {        alertTitle = "Forgot Password"        alertMessage = "Please contact your administrator for password recovery."        showAlert = true    }}// MARK: - Clean Text Fieldstruct CleanTextField: View {    let title: String    @Binding var text: String    let placeholder: String    var suffix: String? = nil    let icon: String    let accentColor: Color        @FocusState private var isFocused: Bool        var body: some View {        VStack(alignment: .leading, spacing: 8) {            Text(title)                .font(.system(size: 14, weight: .medium))                .foregroundColor(.black)                        HStack(spacing: 12) {                Image(systemName: icon)                    .font(.system(size: 16))                    .foregroundColor(isFocused ? accentColor : .gray)                    .frame(width: 20)                    .animation(.easeInOut(duration: 0.2), value: isFocused)                                TextField(placeholder, text: $text)                    .font(.system(size: 16))                    .foregroundColor(.black)                    .autocapitalization(.none)                    .disableAutocorrection(true)                    .focused($isFocused)                                if let suffix = suffix {                    Text(suffix)                        .font(.system(size: 14))                        .foregroundColor(.gray)                }            }            .padding(.vertical, 16)            .padding(.horizontal, 16)            .background(                RoundedRectangle(cornerRadius: 12)                    .fill(Color.gray.opacity(0.05))                    .overlay(                        RoundedRectangle(cornerRadius: 12)                            .stroke(isFocused ? accentColor : Color.gray.opacity(0.2), lineWidth: isFocused ? 2 : 1)                    )            )            .animation(.easeInOut(duration: 0.2), value: isFocused)        }    }}// MARK: - Clean Password Fieldstruct CleanPasswordField: View {    let title: String    @Binding var text: String    let placeholder: String    @Binding var showPassword: Bool    let accentColor: Color        @FocusState private var isFocused: Bool        var body: some View {        VStack(alignment: .leading, spacing: 8) {            Text(title)                .font(.system(size: 14, weight: .medium))                .foregroundColor(.black)                        HStack(spacing: 12) {                Image(systemName: "lock")                    .font(.system(size: 16))                    .foregroundColor(isFocused ? accentColor : .gray)                    .frame(width: 20)                    .animation(.easeInOut(duration: 0.2), value: isFocused)                                if showPassword {                    TextField(placeholder, text: $text)                        .font(.system(size: 16))                        .foregroundColor(.black)                        .focused($isFocused)                } else {                    SecureField(placeholder, text: $text)                        .font(.system(size: 16))                        .foregroundColor(.black)                        .focused($isFocused)                }                                Button(action: {                    showPassword.toggle()                }) {                    Image(systemName: showPassword ? "eye.slash" : "eye")                        .font(.system(size: 16))                        .foregroundColor(.gray)                }            }            .padding(.vertical, 16)            .padding(.horizontal, 16)            .background(                RoundedRectangle(cornerRadius: 12)                    .fill(Color.gray.opacity(0.05))                    .overlay(                        RoundedRectangle(cornerRadius: 12)                            .stroke(isFocused ? accentColor : Color.gray.opacity(0.2), lineWidth: isFocused ? 2 : 1)                    )            )            .animation(.easeInOut(duration: 0.2), value: isFocused)        }    }}